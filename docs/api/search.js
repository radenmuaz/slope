window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "slope.core", "modulename": "slope.core", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "slope.core.Timing", "modulename": "slope.core", "qualname": "Timing", "kind": "class", "doc": "<p>A base class or mixin that enables context managers to work as decorators.</p>\n", "bases": "contextlib.ContextDecorator"}, {"fullname": "slope.core.Timing.__init__", "modulename": "slope.core", "qualname": "Timing.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">on_exit</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">enabled</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, {"fullname": "slope.core.colored", "modulename": "slope.core", "qualname": "colored", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">st</span>, </span><span class=\"param\"><span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">background</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Profiling", "modulename": "slope.core", "qualname": "Profiling", "kind": "class", "doc": "<p>A base class or mixin that enables context managers to work as decorators.</p>\n", "bases": "contextlib.ContextDecorator"}, {"fullname": "slope.core.Profiling.__init__", "modulename": "slope.core", "qualname": "Profiling.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">enabled</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"s1\">&#39;cumtime&#39;</span>, </span><span class=\"param\"><span class=\"n\">frac</span><span class=\"o\">=</span><span class=\"mf\">0.2</span>, </span><span class=\"param\"><span class=\"n\">fn</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">ts</span><span class=\"o\">=</span><span class=\"mi\">1</span></span>)</span>"}, {"fullname": "slope.core.dblog", "modulename": "slope.core", "qualname": "dblog", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"n\">enable</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.unzip2", "modulename": "slope.core", "qualname": "unzip2", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pairs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "slope.core.list_map", "modulename": "slope.core", "qualname": "list_map", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">Callable</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">xs</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "slope.core.list_zip", "modulename": "slope.core", "qualname": "list_zip", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "slope.core.split_half", "modulename": "slope.core", "qualname": "split_half", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lst</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "slope.core.merge_lists", "modulename": "slope.core", "qualname": "merge_lists", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">which</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">l1</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">l2</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "slope.core.split_list", "modulename": "slope.core", "qualname": "split_list", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lst</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "slope.core.partition_list", "modulename": "slope.core", "qualname": "partition_list", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bs</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">l</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "slope.core.lru_cache_verbose", "modulename": "slope.core", "qualname": "lru_cache_verbose", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">maxsize</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">typed</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">tb_start</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">12</span>,</span><span class=\"param\">\t<span class=\"n\">tb_end</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">7</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.cuda_is_available", "modulename": "slope.core", "qualname": "cuda_is_available", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Hashed", "modulename": "slope.core", "qualname": "Hashed", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "slope.core.Hashed.__init__", "modulename": "slope.core", "qualname": "Hashed.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">val</span></span>)</span>"}, {"fullname": "slope.core.Hashed.val", "modulename": "slope.core", "qualname": "Hashed.val", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "slope.core.DType", "modulename": "slope.core", "qualname": "DType", "kind": "class", "doc": "<p>DType(priority, itemsize, name, mlir, numpy)</p>\n", "bases": "typing.NamedTuple"}, {"fullname": "slope.core.DType.__init__", "modulename": "slope.core", "qualname": "DType.__init__", "kind": "function", "doc": "<p>Create new instance of DType(priority, itemsize, name, mlir, numpy)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">priority</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">itemsize</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">mlir</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">numpy</span><span class=\"p\">:</span> <span class=\"nb\">type</span></span>)</span>"}, {"fullname": "slope.core.DType.priority", "modulename": "slope.core", "qualname": "DType.priority", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": int"}, {"fullname": "slope.core.DType.itemsize", "modulename": "slope.core", "qualname": "DType.itemsize", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": int"}, {"fullname": "slope.core.DType.name", "modulename": "slope.core", "qualname": "DType.name", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n", "annotation": ": str"}, {"fullname": "slope.core.DType.mlir", "modulename": "slope.core", "qualname": "DType.mlir", "kind": "variable", "doc": "<p>Alias for field number 3</p>\n", "annotation": ": str"}, {"fullname": "slope.core.DType.numpy", "modulename": "slope.core", "qualname": "DType.numpy", "kind": "variable", "doc": "<p>Alias for field number 4</p>\n", "annotation": ": type"}, {"fullname": "slope.core.DType.format_code", "modulename": "slope.core", "qualname": "DType.format_code", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.dtypes", "modulename": "slope.core", "qualname": "dtypes", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "slope.core.dtypes.float32", "modulename": "slope.core", "qualname": "dtypes.float32", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Final[slope.core.DType]", "default_value": "&lt;DType: float32&gt;"}, {"fullname": "slope.core.dtypes.uint8", "modulename": "slope.core", "qualname": "dtypes.uint8", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Final[slope.core.DType]", "default_value": "&lt;DType: uint8&gt;"}, {"fullname": "slope.core.dtypes.int8", "modulename": "slope.core", "qualname": "dtypes.int8", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Final[slope.core.DType]", "default_value": "&lt;DType: int8&gt;"}, {"fullname": "slope.core.dtypes.bool", "modulename": "slope.core", "qualname": "dtypes.bool", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Final[slope.core.DType]", "default_value": "&lt;DType: bool&gt;"}, {"fullname": "slope.core.dtypes.int32", "modulename": "slope.core", "qualname": "dtypes.int32", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Final[slope.core.DType]", "default_value": "&lt;DType: int32&gt;"}, {"fullname": "slope.core.dtypes.int64", "modulename": "slope.core", "qualname": "dtypes.int64", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Final[slope.core.DType]", "default_value": "&lt;DType: int64&gt;"}, {"fullname": "slope.core.dtypes.uint64", "modulename": "slope.core", "qualname": "dtypes.uint64", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Final[slope.core.DType]", "default_value": "&lt;DType: uint64&gt;"}, {"fullname": "slope.core.dtypes.float16", "modulename": "slope.core", "qualname": "dtypes.float16", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Final[slope.core.DType]", "default_value": "&lt;DType: float16&gt;"}, {"fullname": "slope.core.dtypes.all_dtypes", "modulename": "slope.core", "qualname": "dtypes.all_dtypes", "kind": "variable", "doc": "<p></p>\n", "default_value": "(&lt;DType: bool&gt;, &lt;DType: float16&gt;, &lt;DType: float32&gt;, &lt;DType: int8&gt;, &lt;DType: int32&gt;, &lt;DType: int64&gt;, &lt;DType: uint8&gt;, &lt;DType: uint64&gt;)"}, {"fullname": "slope.core.dtypes.name_dtype_map", "modulename": "slope.core", "qualname": "dtypes.name_dtype_map", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;bool&#x27;: &lt;DType: bool&gt;, &#x27;float16&#x27;: &lt;DType: float16&gt;, &#x27;float32&#x27;: &lt;DType: float32&gt;, &#x27;int8&#x27;: &lt;DType: int8&gt;, &#x27;int32&#x27;: &lt;DType: int32&gt;, &#x27;int64&#x27;: &lt;DType: int64&gt;, &#x27;uint8&#x27;: &lt;DType: uint8&gt;, &#x27;uint64&#x27;: &lt;DType: uint64&gt;}"}, {"fullname": "slope.core.dtypes.name_dtype_map_inv", "modulename": "slope.core", "qualname": "dtypes.name_dtype_map_inv", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&lt;DType: bool&gt;: &#x27;bool&#x27;, &lt;DType: float16&gt;: &#x27;float16&#x27;, &lt;DType: float32&gt;: &#x27;float32&#x27;, &lt;DType: int8&gt;: &#x27;int8&#x27;, &lt;DType: int32&gt;: &#x27;int32&#x27;, &lt;DType: int64&gt;: &#x27;int64&#x27;, &lt;DType: uint8&gt;: &#x27;uint8&#x27;, &lt;DType: uint64&gt;: &#x27;uint64&#x27;}"}, {"fullname": "slope.core.dtypes.mlir_dtype_map", "modulename": "slope.core", "qualname": "dtypes.mlir_dtype_map", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;i1&#x27;: &lt;DType: bool&gt;, &#x27;f16&#x27;: &lt;DType: float16&gt;, &#x27;f32&#x27;: &lt;DType: float32&gt;, &#x27;i8&#x27;: &lt;DType: int8&gt;, &#x27;i32&#x27;: &lt;DType: int32&gt;, &#x27;i64&#x27;: &lt;DType: int64&gt;, &#x27;u8&#x27;: &lt;DType: uint8&gt;, &#x27;ui64&#x27;: &lt;DType: uint64&gt;}"}, {"fullname": "slope.core.dtypes.mlir_dtype_map_inv", "modulename": "slope.core", "qualname": "dtypes.mlir_dtype_map_inv", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&lt;DType: bool&gt;: &#x27;i1&#x27;, &lt;DType: float16&gt;: &#x27;f16&#x27;, &lt;DType: float32&gt;: &#x27;f32&#x27;, &lt;DType: int8&gt;: &#x27;i8&#x27;, &lt;DType: int32&gt;: &#x27;i32&#x27;, &lt;DType: int64&gt;: &#x27;i64&#x27;, &lt;DType: uint8&gt;: &#x27;u8&#x27;, &lt;DType: uint64&gt;: &#x27;ui64&#x27;}"}, {"fullname": "slope.core.dtypes.is_int", "modulename": "slope.core", "qualname": "dtypes.is_int", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">dtype</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.dtypes.is_float", "modulename": "slope.core", "qualname": "dtypes.is_float", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">dtype</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Device", "modulename": "slope.core", "qualname": "Device", "kind": "class", "doc": "<p>Device(name, idx)</p>\n", "bases": "typing.NamedTuple"}, {"fullname": "slope.core.Device.__init__", "modulename": "slope.core", "qualname": "Device.__init__", "kind": "function", "doc": "<p>Create new instance of Device(name, idx)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">idx</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, {"fullname": "slope.core.Device.name", "modulename": "slope.core", "qualname": "Device.name", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": str"}, {"fullname": "slope.core.Device.idx", "modulename": "slope.core", "qualname": "Device.idx", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": int"}, {"fullname": "slope.core.Device.format_code", "modulename": "slope.core", "qualname": "Device.format_code", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.devices", "modulename": "slope.core", "qualname": "devices", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "slope.core.devices.cpu", "modulename": "slope.core", "qualname": "devices.cpu", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Final[slope.core.Device]", "default_value": "&lt;Device: &#x27;cpu:0&#x27;&gt;"}, {"fullname": "slope.core.devices.metal", "modulename": "slope.core", "qualname": "devices.metal", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Final[slope.core.Device]", "default_value": "&lt;Device: &#x27;metal:0&#x27;&gt;"}, {"fullname": "slope.core.devices.cuda0", "modulename": "slope.core", "qualname": "devices.cuda0", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Final[slope.core.Device]", "default_value": "&lt;Device: &#x27;cuda:0&#x27;&gt;"}, {"fullname": "slope.core.devices.cuda", "modulename": "slope.core", "qualname": "devices.cuda", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Device: &#x27;cuda:0&#x27;&gt;"}, {"fullname": "slope.core.devices.all_devices", "modulename": "slope.core", "qualname": "devices.all_devices", "kind": "variable", "doc": "<p></p>\n", "default_value": "(&lt;Device: &#x27;cpu:0&#x27;&gt;, &lt;Device: &#x27;metal:0&#x27;&gt;, &lt;Device: &#x27;cuda:0&#x27;&gt;)"}, {"fullname": "slope.core.devices.name_idx_device_map", "modulename": "slope.core", "qualname": "devices.name_idx_device_map", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;cpu:0&#x27;: &lt;Device: &#x27;cpu:0&#x27;&gt;, &#x27;metal:0&#x27;: &lt;Device: &#x27;metal:0&#x27;&gt;, &#x27;cuda:0&#x27;: &lt;Device: &#x27;cuda:0&#x27;&gt;}"}, {"fullname": "slope.core.devices.name_idx_device_map_inv", "modulename": "slope.core", "qualname": "devices.name_idx_device_map_inv", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&lt;Device: &#x27;cpu:0&#x27;&gt;: &#x27;cpu:0&#x27;, &lt;Device: &#x27;metal:0&#x27;&gt;: &#x27;metal:0&#x27;, &lt;Device: &#x27;cuda:0&#x27;&gt;: &#x27;cuda:0&#x27;}"}, {"fullname": "slope.core.TensorBuffer", "modulename": "slope.core", "qualname": "TensorBuffer", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "slope.core.TensorBuffer.__init__", "modulename": "slope.core", "qualname": "TensorBuffer.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">val</span></span>)</span>"}, {"fullname": "slope.core.TensorBuffer.val", "modulename": "slope.core", "qualname": "TensorBuffer.val", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.Tensor", "modulename": "slope.core", "qualname": "Tensor", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "slope.core.Tensor.__init__", "modulename": "slope.core", "qualname": "Tensor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">TensorBuffer</span></span>)</span>"}, {"fullname": "slope.core.Tensor.buf", "modulename": "slope.core", "qualname": "Tensor.buf", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.Tensor.symval", "modulename": "slope.core", "qualname": "Tensor.symval", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.Tensor.default_dtype", "modulename": "slope.core", "qualname": "Tensor.default_dtype", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.Tensor.is_int", "modulename": "slope.core", "qualname": "Tensor.is_int", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Tensor.is_float", "modulename": "slope.core", "qualname": "Tensor.is_float", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Tensor.is_unsigned", "modulename": "slope.core", "qualname": "Tensor.is_unsigned", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Tensor.to_bool", "modulename": "slope.core", "qualname": "Tensor.to_bool", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Tensor.short", "modulename": "slope.core", "qualname": "Tensor.short", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Tensor.int", "modulename": "slope.core", "qualname": "Tensor.int", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Tensor.long", "modulename": "slope.core", "qualname": "Tensor.long", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Tensor.half", "modulename": "slope.core", "qualname": "Tensor.half", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Tensor.float", "modulename": "slope.core", "qualname": "Tensor.float", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Tensor.str_short", "modulename": "slope.core", "qualname": "Tensor.str_short", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Tensor.val", "modulename": "slope.core", "qualname": "Tensor.val", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.Tensor.size", "modulename": "slope.core", "qualname": "Tensor.size", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">i</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Tensor.dtype", "modulename": "slope.core", "qualname": "Tensor.dtype", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.Tensor.device", "modulename": "slope.core", "qualname": "Tensor.device", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.Tensor.numpy", "modulename": "slope.core", "qualname": "Tensor.numpy", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">memmap</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Tensor.shape", "modulename": "slope.core", "qualname": "Tensor.shape", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.Tensor.ndim", "modulename": "slope.core", "qualname": "Tensor.ndim", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.Tensor.numel", "modulename": "slope.core", "qualname": "Tensor.numel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Tensor.element_size", "modulename": "slope.core", "qualname": "Tensor.element_size", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Tensor.nbytes", "modulename": "slope.core", "qualname": "Tensor.nbytes", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.SymbolicTensor", "modulename": "slope.core", "qualname": "SymbolicTensor", "kind": "class", "doc": "<p></p>\n", "bases": "Tensor"}, {"fullname": "slope.core.SymbolicTensor.__init__", "modulename": "slope.core", "qualname": "SymbolicTensor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">shape</span>, </span><span class=\"param\"><span class=\"n\">dtype</span>, </span><span class=\"param\"><span class=\"n\">device</span></span>)</span>"}, {"fullname": "slope.core.SymbolicTensor.symval", "modulename": "slope.core", "qualname": "SymbolicTensor.symval", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.SymbolicTensor.val", "modulename": "slope.core", "qualname": "SymbolicTensor.val", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.SymbolicTensor.shape", "modulename": "slope.core", "qualname": "SymbolicTensor.shape", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.SymbolicTensor.dtype", "modulename": "slope.core", "qualname": "SymbolicTensor.dtype", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.SymbolicTensor.device", "modulename": "slope.core", "qualname": "SymbolicTensor.device", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.SymbolicTensor.like", "modulename": "slope.core", "qualname": "SymbolicTensor.like", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">but</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.SymbolicTensor.str_short", "modulename": "slope.core", "qualname": "SymbolicTensor.str_short", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Operator", "modulename": "slope.core", "qualname": "Operator", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "slope.core.Operator.__init__", "modulename": "slope.core", "qualname": "Operator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">variadic_inputs</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">nary_outputs</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "slope.core.Operator.name", "modulename": "slope.core", "qualname": "Operator.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.Operator.variadic_inputs", "modulename": "slope.core", "qualname": "Operator.variadic_inputs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.Operator.nary_outputs", "modulename": "slope.core", "qualname": "Operator.nary_outputs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.Operator.args_fixer", "modulename": "slope.core", "qualname": "Operator.args_fixer", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Operator.typecheck", "modulename": "slope.core", "qualname": "Operator.typecheck", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Operator.jvp", "modulename": "slope.core", "qualname": "Operator.jvp", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Operator.T", "modulename": "slope.core", "qualname": "Operator.T", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Operator.vmap", "modulename": "slope.core", "qualname": "Operator.vmap", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Operator.reorg_args", "modulename": "slope.core", "qualname": "Operator.reorg_args", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Operator.reorg_args_nary", "modulename": "slope.core", "qualname": "Operator.reorg_args_nary", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Operator.partial_run", "modulename": "slope.core", "qualname": "Operator.partial_run", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">trace</span>, </span><span class=\"param\"><span class=\"n\">tracers</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Operator.partial_run_instruction", "modulename": "slope.core", "qualname": "Operator.partial_run_instruction", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">unks_in</span>, </span><span class=\"param\"><span class=\"n\">instruction</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.MetaOperator", "modulename": "slope.core", "qualname": "MetaOperator", "kind": "class", "doc": "<p></p>\n", "bases": "Operator"}, {"fullname": "slope.core.MetaOperator.meta_impl", "modulename": "slope.core", "qualname": "MetaOperator.meta_impl", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.UnaryOperator", "modulename": "slope.core", "qualname": "UnaryOperator", "kind": "class", "doc": "<p></p>\n", "bases": "Operator"}, {"fullname": "slope.core.UnaryOperator.vmap", "modulename": "slope.core", "qualname": "UnaryOperator.vmap", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">dim_size</span>, </span><span class=\"param\"><span class=\"n\">vals_in</span>, </span><span class=\"param\"><span class=\"n\">dims_in</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.UnaryOperator.typecheck", "modulename": "slope.core", "qualname": "UnaryOperator.typecheck", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.UnaryOperator.jvp", "modulename": "slope.core", "qualname": "UnaryOperator.jvp", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">primals</span>, </span><span class=\"param\"><span class=\"n\">tangents</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.BinaryOperator", "modulename": "slope.core", "qualname": "BinaryOperator", "kind": "class", "doc": "<p></p>\n", "bases": "Operator"}, {"fullname": "slope.core.BinaryOperator.boolean_output", "modulename": "slope.core", "qualname": "BinaryOperator.boolean_output", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "slope.core.BinaryOperator.args_fixer", "modulename": "slope.core", "qualname": "BinaryOperator.args_fixer", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">w</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.BinaryOperator.vmap", "modulename": "slope.core", "qualname": "BinaryOperator.vmap", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dim_size</span>, </span><span class=\"param\"><span class=\"n\">vals_in</span>, </span><span class=\"param\"><span class=\"n\">dims_in</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.BinaryOperator.typecheck", "modulename": "slope.core", "qualname": "BinaryOperator.typecheck", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">SymbolicTensor</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">SymbolicTensor</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">params</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">SymbolicTensor</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "slope.core.BinaryOperator.jvp", "modulename": "slope.core", "qualname": "BinaryOperator.jvp", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">primals</span>, </span><span class=\"param\"><span class=\"n\">tangents</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.BinaryOperator.T", "modulename": "slope.core", "qualname": "BinaryOperator.T", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cotangents</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">w</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.ReduceOperator", "modulename": "slope.core", "qualname": "ReduceOperator", "kind": "class", "doc": "<p></p>\n", "bases": "Operator"}, {"fullname": "slope.core.ReduceOperator.args_fixer", "modulename": "slope.core", "qualname": "ReduceOperator.args_fixer", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">dim</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">keepdim</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.ReduceOperator.vmap", "modulename": "slope.core", "qualname": "ReduceOperator.vmap", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dim_size</span>, </span><span class=\"param\"><span class=\"n\">vals_in</span>, </span><span class=\"param\"><span class=\"n\">dims_in</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">dim</span>, </span><span class=\"param\"><span class=\"n\">keepdim</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.ReduceOperator.typecheck", "modulename": "slope.core", "qualname": "ReduceOperator.typecheck", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">SymbolicTensor</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">dim</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">keepdim</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">SymbolicTensor</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "slope.core.InitOperator", "modulename": "slope.core", "qualname": "InitOperator", "kind": "class", "doc": "<p></p>\n", "bases": "Operator"}, {"fullname": "slope.core.InitOperator.vmap", "modulename": "slope.core", "qualname": "InitOperator.vmap", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dim_size</span>, </span><span class=\"param\"><span class=\"n\">vals_in</span>, </span><span class=\"param\"><span class=\"n\">dims_in</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.InitOperator.jvp", "modulename": "slope.core", "qualname": "InitOperator.jvp", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">primals</span>, </span><span class=\"param\"><span class=\"n\">tangents</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.InitOperator.T", "modulename": "slope.core", "qualname": "InitOperator.T", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cotangents</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.ShapeOperator", "modulename": "slope.core", "qualname": "ShapeOperator", "kind": "class", "doc": "<p></p>\n", "bases": "Operator"}, {"fullname": "slope.core.GeneralReduceOperator", "modulename": "slope.core", "qualname": "GeneralReduceOperator", "kind": "class", "doc": "<p></p>\n", "bases": "Operator"}, {"fullname": "slope.core.OperatorSet", "modulename": "slope.core", "qualname": "OperatorSet", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "slope.core.OperatorSet.register", "modulename": "slope.core", "qualname": "OperatorSet.register", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">variadic_inputs</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">nary_outputs</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">aliases</span><span class=\"o\">=</span><span class=\"p\">()</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.ProcedureSet", "modulename": "slope.core", "qualname": "ProcedureSet", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "slope.core.ProcedureSet.register", "modulename": "slope.core", "qualname": "ProcedureSet.register", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">aliases</span><span class=\"o\">=</span><span class=\"p\">()</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.CodegenOutput", "modulename": "slope.core", "qualname": "CodegenOutput", "kind": "class", "doc": "<p>CodegenOutput(code_lines, fn_defs, in_binders, outs)</p>\n", "bases": "typing.NamedTuple"}, {"fullname": "slope.core.CodegenOutput.__init__", "modulename": "slope.core", "qualname": "CodegenOutput.__init__", "kind": "function", "doc": "<p>Create new instance of CodegenOutput(code_lines, fn_defs, in_binders, outs)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">code_lines</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">fn_defs</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">in_binders</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;ProgramEnvVar&#39;</span><span class=\"p\">)]</span>,</span><span class=\"param\">\t<span class=\"n\">outs</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;ProgramEnvVar&#39;</span><span class=\"p\">)]</span></span>)</span>"}, {"fullname": "slope.core.CodegenOutput.code_lines", "modulename": "slope.core", "qualname": "CodegenOutput.code_lines", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": List[str]"}, {"fullname": "slope.core.CodegenOutput.fn_defs", "modulename": "slope.core", "qualname": "CodegenOutput.fn_defs", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": Dict[str, List[str]]"}, {"fullname": "slope.core.CodegenOutput.in_binders", "modulename": "slope.core", "qualname": "CodegenOutput.in_binders", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n", "annotation": ": List[slope.core.ProgramEnvVar]"}, {"fullname": "slope.core.CodegenOutput.outs", "modulename": "slope.core", "qualname": "CodegenOutput.outs", "kind": "variable", "doc": "<p>Alias for field number 3</p>\n", "annotation": ": List[slope.core.ProgramEnvVar]"}, {"fullname": "slope.core.Backend", "modulename": "slope.core", "qualname": "Backend", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "slope.core.Backend.__init__", "modulename": "slope.core", "qualname": "Backend.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">operator_set</span><span class=\"p\">:</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">OperatorSet</span>,</span><span class=\"param\">\t<span class=\"n\">procedure_set</span><span class=\"p\">:</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">ProcedureSet</span></span>)</span>"}, {"fullname": "slope.core.Backend.LOG_LRU", "modulename": "slope.core", "qualname": "Backend.LOG_LRU", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, {"fullname": "slope.core.Backend.LOG_JIT", "modulename": "slope.core", "qualname": "Backend.LOG_JIT", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, {"fullname": "slope.core.Backend.LOG_TREE", "modulename": "slope.core", "qualname": "Backend.LOG_TREE", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, {"fullname": "slope.core.Backend.LOG_BACKEND", "modulename": "slope.core", "qualname": "Backend.LOG_BACKEND", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, {"fullname": "slope.core.Backend.LOG_PROGRAM", "modulename": "slope.core", "qualname": "Backend.LOG_PROGRAM", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, {"fullname": "slope.core.Backend.LOG_INIT", "modulename": "slope.core", "qualname": "Backend.LOG_INIT", "kind": "variable", "doc": "<p></p>\n", "default_value": "1"}, {"fullname": "slope.core.Backend.device_var", "modulename": "slope.core", "qualname": "Backend.device_var", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;cpu:0&#x27;"}, {"fullname": "slope.core.Backend.DEFAULT_DEVICE", "modulename": "slope.core", "qualname": "Backend.DEFAULT_DEVICE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Device: &#x27;cpu:0&#x27;&gt;"}, {"fullname": "slope.core.Backend.DEFAULT_DTYPE", "modulename": "slope.core", "qualname": "Backend.DEFAULT_DTYPE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DType: float32&gt;"}, {"fullname": "slope.core.Backend.dtype_for_indices", "modulename": "slope.core", "qualname": "Backend.dtype_for_indices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": slope.core.DType", "default_value": "None"}, {"fullname": "slope.core.Backend.operator_set", "modulename": "slope.core", "qualname": "Backend.operator_set", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.Backend.procedure_set", "modulename": "slope.core", "qualname": "Backend.procedure_set", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.Backend.node_types", "modulename": "slope.core", "qualname": "Backend.node_types", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.Backend.impls", "modulename": "slope.core", "qualname": "Backend.impls", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.Backend.set_impl", "modulename": "slope.core", "qualname": "Backend.set_impl", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">op</span><span class=\"p\">:</span> <span class=\"n\">function</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Backend.register_node", "modulename": "slope.core", "qualname": "Backend.register_node", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ty</span><span class=\"p\">:</span> <span class=\"n\">Type</span>,</span><span class=\"param\">\t<span class=\"n\">to_iter</span><span class=\"p\">:</span> <span class=\"n\">Callable</span>,</span><span class=\"param\">\t<span class=\"n\">from_iter</span><span class=\"p\">:</span> <span class=\"n\">Callable</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Backend.tensor", "modulename": "slope.core", "qualname": "Backend.tensor", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">TensorBuffer</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dtype</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Backend.symbolic_tensor", "modulename": "slope.core", "qualname": "Backend.symbolic_tensor", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">shape</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">TensorBuffer</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dtype</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Backend.seed", "modulename": "slope.core", "qualname": "Backend.seed", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">seed</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Backend.default_dtype_value", "modulename": "slope.core", "qualname": "Backend.default_dtype_value", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.Backend.set_method", "modulename": "slope.core", "qualname": "Backend.set_method", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">method</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Backend.from_numpy", "modulename": "slope.core", "qualname": "Backend.from_numpy", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">val</span>, </span><span class=\"param\"><span class=\"n\">device</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Backend.numpy_of", "modulename": "slope.core", "qualname": "Backend.numpy_of", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tensor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Backend.device_of", "modulename": "slope.core", "qualname": "Backend.device_of", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tensor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Backend.shape_of", "modulename": "slope.core", "qualname": "Backend.shape_of", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tensor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Backend.dtype_of", "modulename": "slope.core", "qualname": "Backend.dtype_of", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tensor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Backend.jit_program", "modulename": "slope.core", "qualname": "Backend.jit_program", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Backend.codegen", "modulename": "slope.core", "qualname": "Backend.codegen", "kind": "function", "doc": "<p>Returns compiler IR from the Program</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">program</span><span class=\"p\">:</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Program</span>,</span><span class=\"param\">\t<span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span>,</span><span class=\"param\">\t<span class=\"n\">in_symvals</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Backend.compile", "modulename": "slope.core", "qualname": "Backend.compile", "kind": "function", "doc": "<p>Compiles compiler IR to a Python callable function</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">program</span><span class=\"p\">:</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Program</span>,</span><span class=\"param\">\t<span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span>,</span><span class=\"param\">\t<span class=\"n\">in_symvals</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Backend.export", "modulename": "slope.core", "qualname": "Backend.export", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">jit_output</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Backend.load", "modulename": "slope.core", "qualname": "Backend.load", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span>, </span><span class=\"param\"><span class=\"n\">single_key</span><span class=\"o\">=</span><span class=\"s1\">&#39;_tensor&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Backend.save", "modulename": "slope.core", "qualname": "Backend.save", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">tensors</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">single_key</span><span class=\"o\">=</span><span class=\"s1\">&#39;_tensor&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Var", "modulename": "slope.core", "qualname": "Var", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "slope.core.Var.__init__", "modulename": "slope.core", "qualname": "Var.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">symval</span></span>)</span>"}, {"fullname": "slope.core.Var.symval", "modulename": "slope.core", "qualname": "Var.symval", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.Var.val", "modulename": "slope.core", "qualname": "Var.val", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.Lit", "modulename": "slope.core", "qualname": "Lit", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "slope.core.Lit.__init__", "modulename": "slope.core", "qualname": "Lit.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">val</span></span>)</span>"}, {"fullname": "slope.core.Lit.symval", "modulename": "slope.core", "qualname": "Lit.symval", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.Lit.val", "modulename": "slope.core", "qualname": "Lit.val", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.Atom", "modulename": "slope.core", "qualname": "Atom", "kind": "variable", "doc": "<p></p>\n", "default_value": "typing.Union[slope.core.Var, slope.core.Lit]"}, {"fullname": "slope.core.Instruction", "modulename": "slope.core", "qualname": "Instruction", "kind": "class", "doc": "<p>Instruction(op, inputs, params, out_binders)</p>\n", "bases": "typing.NamedTuple"}, {"fullname": "slope.core.Instruction.__init__", "modulename": "slope.core", "qualname": "Instruction.__init__", "kind": "function", "doc": "<p>Create new instance of Instruction(op, inputs, params, out_binders)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">op</span><span class=\"p\">:</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Operator</span>,</span><span class=\"param\">\t<span class=\"n\">inputs</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Var</span><span class=\"p\">,</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Lit</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">out_binders</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Var</span><span class=\"p\">,</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Lit</span><span class=\"p\">]]</span></span>)</span>"}, {"fullname": "slope.core.Instruction.op", "modulename": "slope.core", "qualname": "Instruction.op", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": slope.core.Operator"}, {"fullname": "slope.core.Instruction.inputs", "modulename": "slope.core", "qualname": "Instruction.inputs", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": List[Union[slope.core.Var, slope.core.Lit]]"}, {"fullname": "slope.core.Instruction.params", "modulename": "slope.core", "qualname": "Instruction.params", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "slope.core.Instruction.out_binders", "modulename": "slope.core", "qualname": "Instruction.out_binders", "kind": "variable", "doc": "<p>Alias for field number 3</p>\n", "annotation": ": List[Union[slope.core.Var, slope.core.Lit]]"}, {"fullname": "slope.core.ProgramEnvVar", "modulename": "slope.core", "qualname": "ProgramEnvVar", "kind": "class", "doc": "<p>ProgramEnvVar(name, symval, is_const)</p>\n", "bases": "typing.NamedTuple"}, {"fullname": "slope.core.ProgramEnvVar.__init__", "modulename": "slope.core", "qualname": "ProgramEnvVar.__init__", "kind": "function", "doc": "<p>Create new instance of ProgramEnvVar(name, symval, is_const)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">symval</span><span class=\"p\">:</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">SymbolicTensor</span>, </span><span class=\"param\"><span class=\"n\">is_const</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "slope.core.ProgramEnvVar.name", "modulename": "slope.core", "qualname": "ProgramEnvVar.name", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": str"}, {"fullname": "slope.core.ProgramEnvVar.symval", "modulename": "slope.core", "qualname": "ProgramEnvVar.symval", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": slope.core.SymbolicTensor"}, {"fullname": "slope.core.ProgramEnvVar.is_const", "modulename": "slope.core", "qualname": "ProgramEnvVar.is_const", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n", "annotation": ": bool"}, {"fullname": "slope.core.ProgramEnvVar.shape", "modulename": "slope.core", "qualname": "ProgramEnvVar.shape", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.ProgramEnvVar.dtype", "modulename": "slope.core", "qualname": "ProgramEnvVar.dtype", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.ProgramEnvVar.device", "modulename": "slope.core", "qualname": "ProgramEnvVar.device", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.ProgramEnvVar.ndim", "modulename": "slope.core", "qualname": "ProgramEnvVar.ndim", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.ProgramEnvVar.numpy", "modulename": "slope.core", "qualname": "ProgramEnvVar.numpy", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.ProgramEnvVar.str_short", "modulename": "slope.core", "qualname": "ProgramEnvVar.str_short", "kind": "function", "doc": "<p>Return repr(self).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Program", "modulename": "slope.core", "qualname": "Program", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "slope.core.Program.__init__", "modulename": "slope.core", "qualname": "Program.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">in_binders</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">instructions</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Instruction</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">outs</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">num_consts</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">static_args</span><span class=\"p\">:</span> <span class=\"n\">Any</span> <span class=\"o\">=</span> <span class=\"p\">()</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;my_program&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">indent_amount</span><span class=\"o\">=</span><span class=\"mi\">4</span></span>)</span>"}, {"fullname": "slope.core.Program.in_binders", "modulename": "slope.core", "qualname": "Program.in_binders", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "slope.core.Program.outs", "modulename": "slope.core", "qualname": "Program.outs", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "slope.core.Program.instructions", "modulename": "slope.core", "qualname": "Program.instructions", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.Program.num_consts", "modulename": "slope.core", "qualname": "Program.num_consts", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "slope.core.Program.static_args", "modulename": "slope.core", "qualname": "Program.static_args", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.Program.name", "modulename": "slope.core", "qualname": "Program.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "slope.core.Program.indent_amount", "modulename": "slope.core", "qualname": "Program.indent_amount", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "slope.core.Program.env", "modulename": "slope.core", "qualname": "Program.env", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[slope.core.ProgramEnvVar, Any]"}, {"fullname": "slope.core.Program.curr_repr", "modulename": "slope.core", "qualname": "Program.curr_repr", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.Program.pprint_shape", "modulename": "slope.core", "qualname": "Program.pprint_shape", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">symval</span>, </span><span class=\"param\"><span class=\"n\">scalar_as_empty_array</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Program.pprint_sig", "modulename": "slope.core", "qualname": "Program.pprint_sig", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">in_symvals</span>, </span><span class=\"param\"><span class=\"n\">out_symvals</span>, </span><span class=\"param\"><span class=\"n\">unpack_unary_output</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Program.save", "modulename": "slope.core", "qualname": "Program.save", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">dir_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;/tmp/slope_program&#39;</span>, </span><span class=\"param\"><span class=\"n\">dry_run</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Program.instructions_as_code", "modulename": "slope.core", "qualname": "Program.instructions_as_code", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">program</span>, </span><span class=\"param\"><span class=\"n\">fn_defs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Program.prune_instructions", "modulename": "slope.core", "qualname": "Program.prune_instructions", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instructions</span>, </span><span class=\"param\"><span class=\"n\">outs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.ProgramType", "modulename": "slope.core", "qualname": "ProgramType", "kind": "class", "doc": "<p>ProgramType(in_types, out_types)</p>\n", "bases": "typing.NamedTuple"}, {"fullname": "slope.core.ProgramType.__init__", "modulename": "slope.core", "qualname": "ProgramType.__init__", "kind": "function", "doc": "<p>Create new instance of ProgramType(in_types, out_types)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">in_types</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">SymbolicTensor</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">out_types</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">SymbolicTensor</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "slope.core.ProgramType.in_types", "modulename": "slope.core", "qualname": "ProgramType.in_types", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": Tuple[slope.core.SymbolicTensor]"}, {"fullname": "slope.core.ProgramType.out_types", "modulename": "slope.core", "qualname": "ProgramType.out_types", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": Tuple[slope.core.SymbolicTensor]"}, {"fullname": "slope.core.Empty", "modulename": "slope.core", "qualname": "Empty", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "slope.core.empty", "modulename": "slope.core", "qualname": "empty", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;slope.core.Empty object&gt;"}, {"fullname": "slope.core.Store", "modulename": "slope.core", "qualname": "Store", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "slope.core.Store.val", "modulename": "slope.core", "qualname": "Store.val", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;slope.core.Empty object&gt;"}, {"fullname": "slope.core.Store.set_value", "modulename": "slope.core", "qualname": "Store.set_value", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">val</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.NodeType", "modulename": "slope.core", "qualname": "NodeType", "kind": "class", "doc": "<p>NodeType(name, flatten, unflatten)</p>\n", "bases": "typing.NamedTuple"}, {"fullname": "slope.core.NodeType.__init__", "modulename": "slope.core", "qualname": "NodeType.__init__", "kind": "function", "doc": "<p>Create new instance of NodeType(name, flatten, unflatten)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">flatten</span><span class=\"p\">:</span> <span class=\"n\">Callable</span>, </span><span class=\"param\"><span class=\"n\">unflatten</span><span class=\"p\">:</span> <span class=\"n\">Callable</span></span>)</span>"}, {"fullname": "slope.core.NodeType.name", "modulename": "slope.core", "qualname": "NodeType.name", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": str"}, {"fullname": "slope.core.NodeType.flatten", "modulename": "slope.core", "qualname": "NodeType.flatten", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": Callable"}, {"fullname": "slope.core.NodeType.unflatten", "modulename": "slope.core", "qualname": "NodeType.unflatten", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n", "annotation": ": Callable"}, {"fullname": "slope.core.TreeDef", "modulename": "slope.core", "qualname": "TreeDef", "kind": "class", "doc": "<p>TreeDef(node_type, node_metadata, child_treedefs)</p>\n", "bases": "typing.NamedTuple"}, {"fullname": "slope.core.TreeDef.__init__", "modulename": "slope.core", "qualname": "TreeDef.__init__", "kind": "function", "doc": "<p>Create new instance of TreeDef(node_type, node_metadata, child_treedefs)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">node_type</span><span class=\"p\">:</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">NodeType</span>,</span><span class=\"param\">\t<span class=\"n\">node_metadata</span><span class=\"p\">:</span> <span class=\"n\">Hashable</span>,</span><span class=\"param\">\t<span class=\"n\">child_treedefs</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;TreeDef&#39;</span><span class=\"p\">),</span> <span class=\"o\">...</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "slope.core.TreeDef.node_type", "modulename": "slope.core", "qualname": "TreeDef.node_type", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": slope.core.NodeType"}, {"fullname": "slope.core.TreeDef.node_metadata", "modulename": "slope.core", "qualname": "TreeDef.node_metadata", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": Hashable"}, {"fullname": "slope.core.TreeDef.child_treedefs", "modulename": "slope.core", "qualname": "TreeDef.child_treedefs", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n", "annotation": ": Tuple[slope.core.TreeDef, ...]"}, {"fullname": "slope.core.TreeDef.tree_repr", "modulename": "slope.core", "qualname": "TreeDef.tree_repr", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tree</span>, </span><span class=\"param\"><span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"s1\">&#39;  &#39;</span>, </span><span class=\"param\"><span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">last</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.TreeDef.num_leaves", "modulename": "slope.core", "qualname": "TreeDef.num_leaves", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.Leaf", "modulename": "slope.core", "qualname": "Leaf", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "slope.core.Leaf.__init__", "modulename": "slope.core", "qualname": "Leaf.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">val</span></span>)</span>"}, {"fullname": "slope.core.Leaf.val", "modulename": "slope.core", "qualname": "Leaf.val", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.JitOutput", "modulename": "slope.core", "qualname": "JitOutput", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "slope.core.JitOutput.__init__", "modulename": "slope.core", "qualname": "JitOutput.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">program</span><span class=\"p\">:</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Program</span>,</span><span class=\"param\">\t<span class=\"n\">codegen_output</span><span class=\"p\">:</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">CodegenOutput</span>,</span><span class=\"param\">\t<span class=\"n\">fn</span>,</span><span class=\"param\">\t<span class=\"n\">code</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">consts</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "slope.core.JitOutput.program", "modulename": "slope.core", "qualname": "JitOutput.program", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.JitOutput.code", "modulename": "slope.core", "qualname": "JitOutput.code", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.JitOutput.codegen_output", "modulename": "slope.core", "qualname": "JitOutput.codegen_output", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.JitOutput.fn", "modulename": "slope.core", "qualname": "JitOutput.fn", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Callable"}, {"fullname": "slope.core.JitOutput.consts", "modulename": "slope.core", "qualname": "JitOutput.consts", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.JitOp", "modulename": "slope.core", "qualname": "JitOp", "kind": "class", "doc": "<p></p>\n", "bases": "MetaOperator"}, {"fullname": "slope.core.JitOp.meta_impl", "modulename": "slope.core", "qualname": "JitOp.meta_impl", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">program</span><span class=\"p\">:</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Program</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">_</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.JitOp.reorg_args", "modulename": "slope.core", "qualname": "JitOp.reorg_args", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.JitOp.typecheck", "modulename": "slope.core", "qualname": "JitOp.typecheck", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">in_types</span>, </span><span class=\"param\"><span class=\"n\">program</span><span class=\"p\">:</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Program</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.JitOp.vmap", "modulename": "slope.core", "qualname": "JitOp.vmap", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dim_size</span>, </span><span class=\"param\"><span class=\"n\">vals_in</span>, </span><span class=\"param\"><span class=\"n\">dims_in</span>, </span><span class=\"param\"><span class=\"n\">program</span><span class=\"p\">:</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Program</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.JitOp.jvp", "modulename": "slope.core", "qualname": "JitOp.jvp", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">primals</span>, </span><span class=\"param\"><span class=\"n\">tangents</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">program</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.JitOp.T", "modulename": "slope.core", "qualname": "JitOp.T", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cotangents</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">invals</span>, </span><span class=\"param\"><span class=\"n\">program</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.JitOp.partial_run", "modulename": "slope.core", "qualname": "JitOp.partial_run", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">trace</span>, </span><span class=\"param\"><span class=\"n\">tracers</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">program</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.JitOp.partial_run_instruction", "modulename": "slope.core", "qualname": "JitOp.partial_run_instruction", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">unks_in</span>,</span><span class=\"param\">\t<span class=\"n\">instruction</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Instruction</span><span class=\"p\">,</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Instruction</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Var</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "slope.core.MainTrace", "modulename": "slope.core", "qualname": "MainTrace", "kind": "class", "doc": "<p>MainTrace(level, trace_type, global_data)</p>\n", "bases": "typing.NamedTuple"}, {"fullname": "slope.core.MainTrace.__init__", "modulename": "slope.core", "qualname": "MainTrace.__init__", "kind": "function", "doc": "<p>Create new instance of MainTrace(level, trace_type, global_data)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">level</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">trace_type</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Trace&#39;</span><span class=\"p\">)]</span>,</span><span class=\"param\">\t<span class=\"n\">global_data</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "slope.core.MainTrace.level", "modulename": "slope.core", "qualname": "MainTrace.level", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": int"}, {"fullname": "slope.core.MainTrace.trace_type", "modulename": "slope.core", "qualname": "MainTrace.trace_type", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": Type[slope.core.Trace]"}, {"fullname": "slope.core.MainTrace.global_data", "modulename": "slope.core", "qualname": "MainTrace.global_data", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n", "annotation": ": Optional[Any]"}, {"fullname": "slope.core.Trace", "modulename": "slope.core", "qualname": "Trace", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "slope.core.Trace.__init__", "modulename": "slope.core", "qualname": "Trace.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">main</span><span class=\"p\">:</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">MainTrace</span></span>)</span>"}, {"fullname": "slope.core.Trace.main", "modulename": "slope.core", "qualname": "Trace.main", "kind": "variable", "doc": "<p></p>\n", "annotation": ": slope.core.MainTrace"}, {"fullname": "slope.core.Trace.pure", "modulename": "slope.core", "qualname": "Trace.pure", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">val</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.Trace.run_op", "modulename": "slope.core", "qualname": "Trace.run_op", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">op</span>, </span><span class=\"param\"><span class=\"n\">tracers</span>, </span><span class=\"param\"><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.RunTrace", "modulename": "slope.core", "qualname": "RunTrace", "kind": "class", "doc": "<p></p>\n", "bases": "Trace"}, {"fullname": "slope.core.RunTrace.pure", "modulename": "slope.core", "qualname": "RunTrace.pure", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.RunTrace.run_op", "modulename": "slope.core", "qualname": "RunTrace.run_op", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">op</span><span class=\"p\">:</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Operator</span>, </span><span class=\"param\"><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.RunTrace.get_fn", "modulename": "slope.core", "qualname": "RunTrace.get_fn", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "slope.core.SymbolicRunTrace", "modulename": "slope.core", "qualname": "SymbolicRunTrace", "kind": "class", "doc": "<p></p>\n", "bases": "Trace"}, {"fullname": "slope.core.SymbolicRunTrace.pure", "modulename": "slope.core", "qualname": "SymbolicRunTrace.pure", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">SymbolicTensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "slope.core.SymbolicRunTrace.run_op", "modulename": "slope.core", "qualname": "SymbolicRunTrace.run_op", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">op</span>, </span><span class=\"param\"><span class=\"n\">tracers</span>, </span><span class=\"param\"><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.TraceTensor", "modulename": "slope.core", "qualname": "TraceTensor", "kind": "class", "doc": "<p></p>\n", "bases": "Tensor"}, {"fullname": "slope.core.TraceTensor.__init__", "modulename": "slope.core", "qualname": "TraceTensor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "slope.core.TraceTensor.PYTHON_TYPES", "modulename": "slope.core", "qualname": "TraceTensor.PYTHON_TYPES", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;, &lt;class &#x27;bool&#x27;&gt;}"}, {"fullname": "slope.core.TraceTensor.symval", "modulename": "slope.core", "qualname": "TraceTensor.symval", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.TraceTensor.dtype", "modulename": "slope.core", "qualname": "TraceTensor.dtype", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.TraceTensor.shape", "modulename": "slope.core", "qualname": "TraceTensor.shape", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.TraceTensor.device", "modulename": "slope.core", "qualname": "TraceTensor.device", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.TraceTensor.val", "modulename": "slope.core", "qualname": "TraceTensor.val", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.TraceTensor.full_lower", "modulename": "slope.core", "qualname": "TraceTensor.full_lower", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.TraceTensor.ndim", "modulename": "slope.core", "qualname": "TraceTensor.ndim", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.VMapTraceTensor", "modulename": "slope.core", "qualname": "VMapTraceTensor", "kind": "class", "doc": "<p></p>\n", "bases": "TraceTensor"}, {"fullname": "slope.core.VMapTraceTensor.__init__", "modulename": "slope.core", "qualname": "VMapTraceTensor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">trace</span>, </span><span class=\"param\"><span class=\"n\">val</span>, </span><span class=\"param\"><span class=\"n\">vmap_dim</span></span>)</span>"}, {"fullname": "slope.core.VMapTraceTensor.vmap_dim", "modulename": "slope.core", "qualname": "VMapTraceTensor.vmap_dim", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.VMapTraceTensor.val", "modulename": "slope.core", "qualname": "VMapTraceTensor.val", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.VMapTraceTensor.symval", "modulename": "slope.core", "qualname": "VMapTraceTensor.symval", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.VMapTraceTensor.full_lower", "modulename": "slope.core", "qualname": "VMapTraceTensor.full_lower", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.VMapTrace", "modulename": "slope.core", "qualname": "VMapTrace", "kind": "class", "doc": "<p></p>\n", "bases": "Trace"}, {"fullname": "slope.core.VMapTrace.pure", "modulename": "slope.core", "qualname": "VMapTrace.pure", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">val</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.VMapTrace.dim_size", "modulename": "slope.core", "qualname": "VMapTrace.dim_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.VMapTrace.run_op", "modulename": "slope.core", "qualname": "VMapTrace.run_op", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">op</span>, </span><span class=\"param\"><span class=\"n\">tracers</span>, </span><span class=\"param\"><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.VMapTrace.move_vmap_dim", "modulename": "slope.core", "qualname": "VMapTrace.move_vmap_dim", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">dim_size</span>, </span><span class=\"param\"><span class=\"n\">src</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">dst</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.JVPTraceTensor", "modulename": "slope.core", "qualname": "JVPTraceTensor", "kind": "class", "doc": "<p></p>\n", "bases": "TraceTensor"}, {"fullname": "slope.core.JVPTraceTensor.__init__", "modulename": "slope.core", "qualname": "JVPTraceTensor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">trace</span>, </span><span class=\"param\"><span class=\"n\">primal</span>, </span><span class=\"param\"><span class=\"n\">tangent</span></span>)</span>"}, {"fullname": "slope.core.JVPTraceTensor.primal", "modulename": "slope.core", "qualname": "JVPTraceTensor.primal", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.JVPTraceTensor.tangent", "modulename": "slope.core", "qualname": "JVPTraceTensor.tangent", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.JVPTraceTensor.symval", "modulename": "slope.core", "qualname": "JVPTraceTensor.symval", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.JVPTraceTensor.val", "modulename": "slope.core", "qualname": "JVPTraceTensor.val", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.JVPTraceTensor.dtype", "modulename": "slope.core", "qualname": "JVPTraceTensor.dtype", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.JVPTrace", "modulename": "slope.core", "qualname": "JVPTrace", "kind": "class", "doc": "<p></p>\n", "bases": "Trace"}, {"fullname": "slope.core.JVPTrace.pure", "modulename": "slope.core", "qualname": "JVPTrace.pure", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">val</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.JVPTrace.run_op", "modulename": "slope.core", "qualname": "JVPTrace.run_op", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">op</span>, </span><span class=\"param\"><span class=\"n\">tracers</span>, </span><span class=\"param\"><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.ProgramTraceTensor", "modulename": "slope.core", "qualname": "ProgramTraceTensor", "kind": "class", "doc": "<p></p>\n", "bases": "TraceTensor"}, {"fullname": "slope.core.ProgramTraceTensor.__init__", "modulename": "slope.core", "qualname": "ProgramTraceTensor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">trace</span>, </span><span class=\"param\"><span class=\"n\">symval</span></span>)</span>"}, {"fullname": "slope.core.ProgramTraceTensor.symval", "modulename": "slope.core", "qualname": "ProgramTraceTensor.symval", "kind": "variable", "doc": "<p></p>\n", "annotation": ": slope.core.SymbolicTensor"}, {"fullname": "slope.core.ProgramTrace", "modulename": "slope.core", "qualname": "ProgramTrace", "kind": "class", "doc": "<p></p>\n", "bases": "Trace"}, {"fullname": "slope.core.ProgramTrace.builder", "modulename": "slope.core", "qualname": "ProgramTrace.builder", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.ProgramTrace.new_arg", "modulename": "slope.core", "qualname": "ProgramTrace.new_arg", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">symval</span></span><span class=\"return-annotation\">) -> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">ProgramTraceTensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "slope.core.ProgramTrace.pure", "modulename": "slope.core", "qualname": "ProgramTrace.pure", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">ProgramTraceTensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "slope.core.ProgramTrace.run_op", "modulename": "slope.core", "qualname": "ProgramTrace.run_op", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">op</span>, </span><span class=\"param\"><span class=\"n\">tracers</span>, </span><span class=\"param\"><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.ProgramBuilder", "modulename": "slope.core", "qualname": "ProgramBuilder", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "slope.core.ProgramBuilder.instructions", "modulename": "slope.core", "qualname": "ProgramBuilder.instructions", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[slope.core.Instruction]"}, {"fullname": "slope.core.ProgramBuilder.tracer_to_var", "modulename": "slope.core", "qualname": "ProgramBuilder.tracer_to_var", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[int, slope.core.Var]"}, {"fullname": "slope.core.ProgramBuilder.const_tracers", "modulename": "slope.core", "qualname": "ProgramBuilder.const_tracers", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[int, slope.core.TraceTensor]"}, {"fullname": "slope.core.ProgramBuilder.constvals", "modulename": "slope.core", "qualname": "ProgramBuilder.constvals", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[slope.core.Var, Any]"}, {"fullname": "slope.core.ProgramBuilder.tracers", "modulename": "slope.core", "qualname": "ProgramBuilder.tracers", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[slope.core.ProgramTraceTensor]"}, {"fullname": "slope.core.ProgramBuilder.new_tracer", "modulename": "slope.core", "qualname": "ProgramBuilder.new_tracer", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">trace</span><span class=\"p\">:</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">ProgramTrace</span>,</span><span class=\"param\">\t<span class=\"n\">symval</span><span class=\"p\">:</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">SymbolicTensor</span></span><span class=\"return-annotation\">) -> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">ProgramTraceTensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "slope.core.ProgramBuilder.add_instruction", "modulename": "slope.core", "qualname": "ProgramBuilder.add_instruction", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">instruction</span><span class=\"p\">:</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Instruction</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "slope.core.ProgramBuilder.add_var", "modulename": "slope.core", "qualname": "ProgramBuilder.add_var", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tracer</span><span class=\"p\">:</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">ProgramTraceTensor</span></span><span class=\"return-annotation\">) -> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Var</span>:</span></span>", "funcdef": "def"}, {"fullname": "slope.core.ProgramBuilder.getvar", "modulename": "slope.core", "qualname": "ProgramBuilder.getvar", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tracer</span><span class=\"p\">:</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">ProgramTraceTensor</span></span><span class=\"return-annotation\">) -> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Var</span>:</span></span>", "funcdef": "def"}, {"fullname": "slope.core.ProgramBuilder.add_const", "modulename": "slope.core", "qualname": "ProgramBuilder.add_const", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tracer</span><span class=\"p\">:</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">ProgramTraceTensor</span>, </span><span class=\"param\"><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Var</span>:</span></span>", "funcdef": "def"}, {"fullname": "slope.core.ProgramBuilder.build", "modulename": "slope.core", "qualname": "ProgramBuilder.build", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">in_tracers</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">out_tracers</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">static_args</span>,</span><span class=\"param\">\t<span class=\"n\">name</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Program</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "slope.core.ProgramBuilder.get_current_scope_info", "modulename": "slope.core", "qualname": "ProgramBuilder.get_current_scope_info", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.UndefinedPrimal", "modulename": "slope.core", "qualname": "UndefinedPrimal", "kind": "class", "doc": "<p>UndefinedPrimal(symval,)</p>\n", "bases": "typing.NamedTuple"}, {"fullname": "slope.core.UndefinedPrimal.__init__", "modulename": "slope.core", "qualname": "UndefinedPrimal.__init__", "kind": "function", "doc": "<p>Create new instance of UndefinedPrimal(symval,)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">symval</span><span class=\"p\">:</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">SymbolicTensor</span></span>)</span>"}, {"fullname": "slope.core.UndefinedPrimal.symval", "modulename": "slope.core", "qualname": "UndefinedPrimal.symval", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": slope.core.SymbolicTensor"}, {"fullname": "slope.core.UndefinedPrimal.shape", "modulename": "slope.core", "qualname": "UndefinedPrimal.shape", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.UndefinedPrimal.dtype", "modulename": "slope.core", "qualname": "UndefinedPrimal.dtype", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.UndefinedPrimal.device", "modulename": "slope.core", "qualname": "UndefinedPrimal.device", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.UndefinedPrimal.ndim", "modulename": "slope.core", "qualname": "UndefinedPrimal.ndim", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.UndefinedPrimal.str_short", "modulename": "slope.core", "qualname": "UndefinedPrimal.str_short", "kind": "function", "doc": "<p>Return repr(self).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.PartialValue", "modulename": "slope.core", "qualname": "PartialValue", "kind": "class", "doc": "<p>PartialValue(symval, const)</p>\n", "bases": "typing.NamedTuple"}, {"fullname": "slope.core.PartialValue.__init__", "modulename": "slope.core", "qualname": "PartialValue.__init__", "kind": "function", "doc": "<p>Create new instance of PartialValue(symval, const)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">symval</span><span class=\"p\">:</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">SymbolicTensor</span>, </span><span class=\"param\"><span class=\"n\">const</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "slope.core.PartialValue.symval", "modulename": "slope.core", "qualname": "PartialValue.symval", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": slope.core.SymbolicTensor"}, {"fullname": "slope.core.PartialValue.const", "modulename": "slope.core", "qualname": "PartialValue.const", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": Optional[Any]"}, {"fullname": "slope.core.PartialValue.is_known", "modulename": "slope.core", "qualname": "PartialValue.is_known", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.PartialValue.is_unknown", "modulename": "slope.core", "qualname": "PartialValue.is_unknown", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.LambdaBindingDraft", "modulename": "slope.core", "qualname": "LambdaBindingDraft", "kind": "class", "doc": "<p>LambdaBindingDraft()</p>\n", "bases": "typing.NamedTuple"}, {"fullname": "slope.core.LambdaBindingDraft.__init__", "modulename": "slope.core", "qualname": "LambdaBindingDraft.__init__", "kind": "function", "doc": "<p>Create new instance of LambdaBindingDraft()</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "slope.core.ConstDraft", "modulename": "slope.core", "qualname": "ConstDraft", "kind": "class", "doc": "<p>ConstDraft(val,)</p>\n", "bases": "typing.NamedTuple"}, {"fullname": "slope.core.ConstDraft.__init__", "modulename": "slope.core", "qualname": "ConstDraft.__init__", "kind": "function", "doc": "<p>Create new instance of ConstDraft(val,)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "slope.core.ConstDraft.val", "modulename": "slope.core", "qualname": "ConstDraft.val", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": Any"}, {"fullname": "slope.core.InstructionDraft", "modulename": "slope.core", "qualname": "InstructionDraft", "kind": "class", "doc": "<p>InstructionDraft(prim, tracers_in, params, symvals_out, tracer_refs_out)</p>\n", "bases": "typing.NamedTuple"}, {"fullname": "slope.core.InstructionDraft.__init__", "modulename": "slope.core", "qualname": "InstructionDraft.__init__", "kind": "function", "doc": "<p>Create new instance of InstructionDraft(prim, tracers_in, params, symvals_out, tracer_refs_out)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">prim</span><span class=\"p\">:</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Operator</span>,</span><span class=\"param\">\t<span class=\"n\">tracers_in</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;PartialRunTraceTensor&#39;</span><span class=\"p\">)]</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">symvals_out</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">SymbolicTensor</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">tracer_refs_out</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">weakref</span><span class=\"o\">.</span><span class=\"n\">ReferenceType</span><span class=\"p\">[</span><span class=\"s1\">&#39;PartialRunTraceTensor&#39;</span><span class=\"p\">]]</span></span>)</span>"}, {"fullname": "slope.core.InstructionDraft.prim", "modulename": "slope.core", "qualname": "InstructionDraft.prim", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": slope.core.Operator"}, {"fullname": "slope.core.InstructionDraft.tracers_in", "modulename": "slope.core", "qualname": "InstructionDraft.tracers_in", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": List[slope.core.PartialRunTraceTensor]"}, {"fullname": "slope.core.InstructionDraft.params", "modulename": "slope.core", "qualname": "InstructionDraft.params", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "slope.core.InstructionDraft.symvals_out", "modulename": "slope.core", "qualname": "InstructionDraft.symvals_out", "kind": "variable", "doc": "<p>Alias for field number 3</p>\n", "annotation": ": List[slope.core.SymbolicTensor]"}, {"fullname": "slope.core.InstructionDraft.tracer_refs_out", "modulename": "slope.core", "qualname": "InstructionDraft.tracer_refs_out", "kind": "variable", "doc": "<p>Alias for field number 4</p>\n", "annotation": ": List[weakref.ReferenceType[slope.core.PartialRunTraceTensor]]"}, {"fullname": "slope.core.ProgramDraft", "modulename": "slope.core", "qualname": "ProgramDraft", "kind": "variable", "doc": "<p></p>\n", "default_value": "typing.Union[slope.core.LambdaBindingDraft, slope.core.ConstDraft, slope.core.InstructionDraft]"}, {"fullname": "slope.core.PartialRunTraceTensor", "modulename": "slope.core", "qualname": "PartialRunTraceTensor", "kind": "class", "doc": "<p></p>\n", "bases": "TraceTensor"}, {"fullname": "slope.core.PartialRunTraceTensor.__init__", "modulename": "slope.core", "qualname": "PartialRunTraceTensor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">trace</span>, </span><span class=\"param\"><span class=\"n\">pval</span>, </span><span class=\"param\"><span class=\"n\">draft</span></span>)</span>"}, {"fullname": "slope.core.PartialRunTraceTensor.pval", "modulename": "slope.core", "qualname": "PartialRunTraceTensor.pval", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.PartialRunTraceTensor.draft", "modulename": "slope.core", "qualname": "PartialRunTraceTensor.draft", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.PartialRunTraceTensor.symval", "modulename": "slope.core", "qualname": "PartialRunTraceTensor.symval", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.PartialRunTraceTensor.val", "modulename": "slope.core", "qualname": "PartialRunTraceTensor.val", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.PartialRunTraceTensor.full_lower", "modulename": "slope.core", "qualname": "PartialRunTraceTensor.full_lower", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.PartialRunTrace", "modulename": "slope.core", "qualname": "PartialRunTrace", "kind": "class", "doc": "<p></p>\n", "bases": "Trace"}, {"fullname": "slope.core.PartialRunTrace.new_arg", "modulename": "slope.core", "qualname": "PartialRunTrace.new_arg", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pval</span><span class=\"p\">:</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">PartialValue</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "slope.core.PartialRunTrace.pure", "modulename": "slope.core", "qualname": "PartialRunTrace.pure", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">PartialRunTraceTensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "slope.core.PartialRunTrace.instantiate_const", "modulename": "slope.core", "qualname": "PartialRunTrace.instantiate_const", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">tracer</span><span class=\"p\">:</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">PartialRunTraceTensor</span></span><span class=\"return-annotation\">) -> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">PartialRunTraceTensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "slope.core.PartialRunTrace.run_op", "modulename": "slope.core", "qualname": "PartialRunTrace.run_op", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">op</span>, </span><span class=\"param\"><span class=\"n\">tracers</span>, </span><span class=\"param\"><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.trace_stack", "modulename": "slope.core", "qualname": "trace_stack", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[slope.core.MainTrace]", "default_value": "[MainTrace(level=0, trace_type=&lt;class &#x27;slope.core.RunTrace&#x27;&gt;, global_data=None)]"}, {"fullname": "slope.core.stashed_trace", "modulename": "slope.core", "qualname": "stashed_trace", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[slope.core.MainTrace]", "default_value": "None"}, {"fullname": "slope.core.UndefBackend", "modulename": "slope.core", "qualname": "UndefBackend", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "slope.core.backend", "modulename": "slope.core", "qualname": "backend", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;slope.backends.onnxruntime.ONNXRuntimeBackend object&gt;"}, {"fullname": "slope.core.set_backend", "modulename": "slope.core", "qualname": "set_backend", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">where</span><span class=\"o\">=</span><span class=\"s1\">&#39;slope.backends&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.stack_str", "modulename": "slope.core", "qualname": "stack_str", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.make_known_pval", "modulename": "slope.core", "qualname": "make_known_pval", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.make_unknown_pval", "modulename": "slope.core", "qualname": "make_unknown_pval", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">symval</span><span class=\"p\">:</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">SymbolicTensor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.get_symval", "modulename": "slope.core", "qualname": "get_symval", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.tree_flatten", "modulename": "slope.core", "qualname": "tree_flatten", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "slope.core.tree_unflatten", "modulename": "slope.core", "qualname": "tree_unflatten", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">treedef</span><span class=\"p\">:</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">TreeDef</span>, </span><span class=\"param\"><span class=\"n\">xs</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "slope.core.tree_transpose", "modulename": "slope.core", "qualname": "tree_transpose", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">outer_treedef</span><span class=\"p\">:</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">TreeDef</span>,</span><span class=\"param\">\t<span class=\"n\">inner_treedef</span><span class=\"p\">:</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">TreeDef</span>,</span><span class=\"param\">\t<span class=\"n\">tree_to_transpose</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "slope.core.flatten_fn", "modulename": "slope.core", "qualname": "flatten_fn", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">f</span>, </span><span class=\"param\"><span class=\"n\">in_tree</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">has_aux</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.tree_map", "modulename": "slope.core", "qualname": "tree_map", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">tree</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">rest</span>, </span><span class=\"param\"><span class=\"n\">out_leaf</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "slope.core.new_main_trace", "modulename": "slope.core", "qualname": "new_main_trace", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">trace_type</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Trace</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">global_data</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.bind", "modulename": "slope.core", "qualname": "bind", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">op</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.find_top_trace", "modulename": "slope.core", "qualname": "find_top_trace", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">xs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Trace</span>:</span></span>", "funcdef": "def"}, {"fullname": "slope.core.full_raise", "modulename": "slope.core", "qualname": "full_raise", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">trace</span><span class=\"p\">:</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Trace</span>, </span><span class=\"param\"><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">TraceTensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "slope.core.full_lower", "modulename": "slope.core", "qualname": "full_lower", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.typecheck_program", "modulename": "slope.core", "qualname": "typecheck_program", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">program</span><span class=\"p\">:</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Program</span></span><span class=\"return-annotation\">) -> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">ProgramType</span>:</span></span>", "funcdef": "def"}, {"fullname": "slope.core.typecheck_atom", "modulename": "slope.core", "qualname": "typecheck_atom", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Var</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Var</span><span class=\"p\">,</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Lit</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">SymbolicTensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "slope.core.run_program", "modulename": "slope.core", "qualname": "run_program", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">program</span><span class=\"p\">:</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Program</span>, </span><span class=\"param\"><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "slope.core.program_as_fun", "modulename": "slope.core", "qualname": "program_as_fun", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">program</span><span class=\"p\">:</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Program</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.vmap_flat", "modulename": "slope.core", "qualname": "vmap_flat", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">f</span>, </span><span class=\"param\"><span class=\"n\">in_dim</span>, </span><span class=\"param\"><span class=\"n\">out_dim</span>, </span><span class=\"param\"><span class=\"n\">dim_size</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.vmap", "modulename": "slope.core", "qualname": "vmap", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">f</span>, </span><span class=\"param\"><span class=\"n\">in_dim</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">out_dim</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">dim_size</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.jvp_flat", "modulename": "slope.core", "qualname": "jvp_flat", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">f</span>, </span><span class=\"param\"><span class=\"n\">primals</span>, </span><span class=\"param\"><span class=\"n\">tangents</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">has_aux</span>, </span><span class=\"param\"><span class=\"n\">global_data</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">static_args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.jvp", "modulename": "slope.core", "qualname": "jvp", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">f</span>,</span><span class=\"param\">\t<span class=\"n\">primals</span>,</span><span class=\"param\">\t<span class=\"n\">tangents</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">has_aux</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">global_data</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">static_args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.jacfwd", "modulename": "slope.core", "qualname": "jacfwd", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">f</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.stash_trace", "modulename": "slope.core", "qualname": "stash_trace", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">main</span><span class=\"p\">:</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">MainTrace</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.symbolic_run", "modulename": "slope.core", "qualname": "symbolic_run", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.make_program", "modulename": "slope.core", "qualname": "make_program", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "slope.core.vmap_program", "modulename": "slope.core", "qualname": "vmap_program", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "slope.core.jvp_program", "modulename": "slope.core", "qualname": "jvp_program", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "slope.core.partial_run_flat", "modulename": "slope.core", "qualname": "partial_run_flat", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">Callable</span>,</span><span class=\"param\">\t<span class=\"n\">pvals_in</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">PartialValue</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">has_aux</span>,</span><span class=\"param\">\t<span class=\"n\">global_data</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Program</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">PartialValue</span><span class=\"p\">],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "slope.core.partial_run_program", "modulename": "slope.core", "qualname": "partial_run_program", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">program</span><span class=\"p\">:</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Program</span>,</span><span class=\"param\">\t<span class=\"n\">in_unknowns</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">instantiate</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Program</span><span class=\"p\">,</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Program</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">],</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "slope.core.typecheck_partial_run_program", "modulename": "slope.core", "qualname": "typecheck_partial_run_program", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">program</span>, </span><span class=\"param\"><span class=\"n\">in_unknowns</span>, </span><span class=\"param\"><span class=\"n\">out_unknowns</span>, </span><span class=\"param\"><span class=\"n\">program1</span>, </span><span class=\"param\"><span class=\"n\">program2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.linearize_flat", "modulename": "slope.core", "qualname": "linearize_flat", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">f</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">primals_in</span>, </span><span class=\"param\"><span class=\"n\">has_aux</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.linearize", "modulename": "slope.core", "qualname": "linearize", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">f</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">primals_in</span>, </span><span class=\"param\"><span class=\"n\">has_aux</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.tracers_to_program", "modulename": "slope.core", "qualname": "tracers_to_program", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">tracers_in</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">PartialRunTraceTensor</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">tracers_out</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">PartialRunTraceTensor</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.toposort", "modulename": "slope.core", "qualname": "toposort", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">out_nodes</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">parents</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.vjp_flat", "modulename": "slope.core", "qualname": "vjp_flat", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">f</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">primals_in</span>, </span><span class=\"param\"><span class=\"n\">has_aux</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">static_args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.vjp", "modulename": "slope.core", "qualname": "vjp", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">f</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">primals_in</span>, </span><span class=\"param\"><span class=\"n\">has_aux</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">static_args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.NullCotangent", "modulename": "slope.core", "qualname": "NullCotangent", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "slope.core.backward_pass", "modulename": "slope.core", "qualname": "backward_pass", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">program</span><span class=\"p\">:</span> <span class=\"n\">slope</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Program</span>,</span><span class=\"param\">\t<span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">cotangents</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "slope.core.transpose_program", "modulename": "slope.core", "qualname": "transpose_program", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "slope.core.grad", "modulename": "slope.core", "qualname": "grad", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">f</span>, </span><span class=\"param\"><span class=\"n\">argnums</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,)</span>, </span><span class=\"param\"><span class=\"n\">argnames</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">has_aux</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">return_value</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.value_and_grad", "modulename": "slope.core", "qualname": "value_and_grad", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">f</span>, </span><span class=\"param\"><span class=\"n\">argnums</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,)</span>, </span><span class=\"param\"><span class=\"n\">argnames</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">has_aux</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.jit_partial_run", "modulename": "slope.core", "qualname": "jit_partial_run", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">trace</span>, </span><span class=\"param\"><span class=\"n\">tracers</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">program</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.jit", "modulename": "slope.core", "qualname": "jit", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "slope.core.jit.__init__", "modulename": "slope.core", "qualname": "jit.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">f</span>, </span><span class=\"param\"><span class=\"n\">static_argnames</span><span class=\"o\">=</span><span class=\"p\">()</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "slope.core.jit.f", "modulename": "slope.core", "qualname": "jit.f", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.jit.name", "modulename": "slope.core", "qualname": "jit.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.jit.static_argnames", "modulename": "slope.core", "qualname": "jit.static_argnames", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "slope.core.jit.with_options", "modulename": "slope.core", "qualname": "jit.with_options", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">static_argnames</span><span class=\"o\">=</span><span class=\"p\">()</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.jit.get_jit_name", "modulename": "slope.core", "qualname": "jit.get_jit_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">static_args</span>, </span><span class=\"param\"><span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s1\">&#39;jit&#39;</span>, </span><span class=\"param\"><span class=\"n\">short</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.jit.get_program", "modulename": "slope.core", "qualname": "jit.get_program", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">static_args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.jit.lower", "modulename": "slope.core", "qualname": "jit.lower", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">static_args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "slope.core.jit.export", "modulename": "slope.core", "qualname": "jit.export", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"n\">output_path</span>,</span><span class=\"param\">\t<span class=\"n\">export_params</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">input_names</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">output_names</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();